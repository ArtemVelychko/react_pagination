{"version":3,"sources":["components/Pagination/Pagination.tsx","App.tsx","utils.ts","index.tsx"],"names":["Pagination","total","perPage","currentPage","onPageChange","totalPages","Math","ceil","lastPageItems","pageNumbers","i","push","pageContent","className","cn","disabled","href","onClick","map","page","active","item","content","items","from","to","numbers","n","getNumbers","App","useState","setPerPage","setCurrentPage","totalItems","length","itemsFrom","itemsTo","pageDescriprion","id","value","onChange","element","Number","target","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"kNAUaA,EAA8B,SAAC,GAc1C,IATK,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEMC,EAAaC,KAAKC,KAAKN,EAAQC,GAE/BM,EADaH,IAAeF,EAE9BF,EAAQC,EACRA,EAEEO,EAAc,GAEXC,EAAI,EAAGA,EAAIL,EAAYK,IAC9BD,EAAYE,KAAKD,EAAI,GAKvB,IAFA,IAAME,EAAc,GAEXF,EAAI,EAAGA,EAAIF,EAAeE,IACjCE,EAAYD,KAAKD,GAAMP,EAAc,IAAMD,EAAW,GAGxD,OACE,qCACE,qBAAIW,UAAU,aAAd,UACE,oBAAIA,UAAWC,IAAG,YAChB,CAAEC,SAA0B,IAAhBZ,IADd,SAGE,mBACE,UAAQ,WACRU,UAAU,YACVG,KAAK,QACL,gBAA+B,IAAhBb,EAAoB,OAAS,QAC5Cc,QAAS,kBAAMb,EAAaD,EAAc,IAL5C,oBAUDM,EAAYS,KAAI,SAACC,GAChB,OACE,oBACEN,UAAWC,IAAG,YAAa,CAAEM,OAAQD,IAAShB,IADhD,SAIE,mBACE,UAAQ,WACRU,UAAU,YACVG,KAAI,WAAMG,GACVF,QAAS,kBAAMb,EAAae,IAJ9B,SAMGA,KAREA,MAaX,oBAAIN,UAAWC,IAAG,YAChB,CAAEC,SAAUZ,IAAgBE,IAD9B,SAGE,mBACE,UAAQ,WACRQ,UAAU,YACVG,KAAK,QACL,gBAAeb,IAAgBE,EAAa,OAAS,QACrDY,QAAS,kBAAMb,EAAaD,EAAc,IAL5C,uBAWJ,6BACGS,EAAYM,KAAI,SAACG,GAChB,IAAMC,EAAO,eAAWD,GAExB,OACE,oBAAe,UAAQ,OAAvB,SACGC,GADMD,YCjFrB,IAAME,ECLC,SAAoBC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQf,KAAKgB,GAGf,OAAOD,EDFKE,CAAW,EAAG,IACzBV,KAAI,SAAAS,GAAC,qBAAYA,MAEPE,EAAgB,WAC3B,MAA8BC,mBAAS,GAAvC,mBAAO5B,EAAP,KAAgB6B,EAAhB,KACA,EAAsCD,mBAAS,GAA/C,mBAAO3B,EAAP,KAAoB6B,EAApB,KACMC,EAAaV,EAAMW,OAOnBC,GAAchC,EAAc,GAAKD,EAAW,EAC5CkC,EAPa9B,KAAKC,KAAK0B,EAAa/B,KAQvBC,EAAc8B,EAAa/B,EAAUC,EAElDkC,EAAe,eAAWlC,EAAX,mBAAiCgC,EAAjC,cAAgDC,EAAhD,eAA8DH,EAA9D,KAErB,OACE,sBAAKpB,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,SACGwB,IAGH,sBAAKxB,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACRyB,GAAG,kBACHzB,UAAU,eACV0B,MAAOrC,EACPsC,SAAU,SAACC,GACTV,EAAWW,OAAOD,EAAQE,OAAOJ,QACjCP,EAAe,IAPnB,UAUE,wBAAQO,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOK,QAAQ,kBAAkB/B,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACEZ,MAAOgC,EACP/B,QAASA,EACTC,YAAaA,EACbC,aA9CmB,SAACe,GACxBa,EAAeb,UEZnB0B,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.d7ee7e38.chunk.js","sourcesContent":["/* eslint-disable no-plusplus */\nimport cn from 'classnames';\n\ntype Props = {\n  total: number,\n  perPage: number,\n  currentPage: number,\n  onPageChange: (page: number) => void,\n};\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const totalPages = Math.ceil(total / perPage);\n  const isLastPage = totalPages === currentPage;\n  const lastPageItems = isLastPage\n    ? total % perPage\n    : perPage;\n\n  const pageNumbers = [];\n\n  for (let i = 0; i < totalPages; i++) {\n    pageNumbers.push(i + 1);\n  }\n\n  const pageContent = [];\n\n  for (let i = 0; i < lastPageItems; i++) {\n    pageContent.push(i + ((currentPage - 1) * +perPage) + 1);\n  }\n\n  return (\n    <>\n      <ul className=\"pagination\">\n        <li className={cn('page-item',\n          { disabled: currentPage === 1 })}\n        >\n          <a\n            data-cy=\"prevLink\"\n            className=\"page-link\"\n            href=\"#prev\"\n            aria-disabled={currentPage === 1 ? 'true' : 'false'}\n            onClick={() => onPageChange(currentPage - 1)}\n          >\n            «\n          </a>\n        </li>\n        {pageNumbers.map((page) => {\n          return (\n            <li\n              className={cn('page-item', { active: page === currentPage })}\n              key={page}\n            >\n              <a\n                data-cy=\"pageLink\"\n                className=\"page-link\"\n                href={`#${page}`}\n                onClick={() => onPageChange(page)}\n              >\n                {page}\n              </a>\n            </li>\n          );\n        })}\n        <li className={cn('page-item',\n          { disabled: currentPage === totalPages })}\n        >\n          <a\n            data-cy=\"nextLink\"\n            className=\"page-link\"\n            href=\"#next\"\n            aria-disabled={currentPage === totalPages ? 'true' : 'false'}\n            onClick={() => onPageChange(currentPage + 1)}\n          >\n            »\n          </a>\n        </li>\n      </ul>\n      <ul>\n        {pageContent.map((item) => {\n          const content = `Item ${item}`;\n\n          return (\n            <li key={item} data-cy=\"item\">\n              {content}\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Pagination } from './components/Pagination';\nimport { getNumbers } from './utils';\n\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const [perPage, setPerPage] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n  const totalItems = items.length;\n  const totalPages = Math.ceil(totalItems / perPage);\n\n  const handlePageChange = (page: number) => {\n    setCurrentPage(page);\n  };\n\n  const itemsFrom = ((currentPage - 1) * perPage) + 1;\n  const itemsTo\n    = totalPages === currentPage ? totalItems : perPage * currentPage;\n\n  const pageDescriprion = `Page ${currentPage} (items ${itemsFrom} - ${itemsTo} of ${totalItems})`;\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {pageDescriprion}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={perPage}\n            onChange={(element) => {\n              setPerPage(Number(element.target.value));\n              setCurrentPage(1);\n            }}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={totalItems}\n        perPage={perPage}\n        currentPage={currentPage}\n        onPageChange={handlePageChange}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}